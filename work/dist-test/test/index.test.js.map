{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../test/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import test from 'ava';\nimport {\n  retry, sleep, defaultCalculateDelay,\n  AttemptOptions, AttemptContext\n} from '../src';\n\nfunction almostEqual (a: number, b: number, tolerance: number) {\n  return Math.abs(a - b) <= tolerance;\n}\n\nconst DELAY_TOLERANCE = parseInt(process.env.DELAY_TOLERANCE || '', 10) || 100;\n\ntest('should be able to calculate delays', (t) => {\n  const options = {\n    delay: 0,\n    initialDelay: 0,\n    minDelay: 0,\n    maxDelay: 0,\n    factor: 0,\n    maxAttempts: 0,\n    timeout: 0,\n    totalTimeout: 0,\n    jitter: false,\n    handleError: null,\n    handleTimeout: null,\n    handleTotalTimeout: null,\n    beforeAttempt: null,\n    calculateDelay: null\n  };\n\n  const context: AttemptContext = {\n    attemptNum: 0,\n    attemptsRemaining: 0,\n    aborted: false,\n    abort () {\n      // do nothing\n    }\n  };\n\n  for (const attempt of [\n    { num: 1, delay: 200, factor: 0, expected: 200 },\n    { num: 2, delay: 200, factor: 0, expected: 200 },\n    { num: 3, delay: 200, factor: 0, expected: 200 },\n    //\n    { num: 1, delay: 200, factor: 2, expected: 200 },\n    { num: 2, delay: 200, factor: 2, expected: 400 },\n    { num: 3, delay: 200, factor: 2, expected: 800 },\n    //\n    { num: 1, delay: 200, factor: 1.5, expected: 200 },\n    { num: 2, delay: 200, factor: 1.5, expected: 300 },\n    { num: 3, delay: 200, factor: 1.5, expected: 450 },\n    //\n    { num: 1, delay: 0, factor: 15 /* ignored because delay is 0 */, expected: 0 },\n    { num: 2, delay: 0, factor: 15 /* ignored because delay is 0 */, expected: 0 },\n    { num: 3, delay: 0, factor: 15 /* ignored because delay is 0 */, expected: 0 },\n    //\n    { num: 1, delay: 200, maxDelay: 300, factor: 2, expected: 200 },\n    { num: 2, delay: 200, maxDelay: 300, factor: 2, expected: 300 },\n    { num: 3, delay: 200, maxDelay: 300, factor: 2, expected: 300 }\n  ]) {\n    context.attemptNum = attempt.num;\n    options.delay = attempt.delay;\n    options.factor = attempt.factor;\n    options.maxDelay = attempt.maxDelay || 0;\n    const delay = defaultCalculateDelay(context, options as AttemptOptions<any>);\n    t.is(delay, attempt.expected, JSON.stringify(attempt));\n  }\n});\n\ntest('should default to 3 attempts with 200 delay', async (t) => {\n  let expectedDelays = [\n    0,\n    200,\n    200\n  ];\n\n  let lastTime = Date.now();\n  let attemptCount = 0;\n\n  const err = await t.throws(retry(async (context, options) => {\n    let newTime = Date.now();\n    let actualDelay = newTime - lastTime;\n    lastTime = newTime;\n\n    t.deepEqual(options, {\n      delay: 200,\n      initialDelay: 0,\n      minDelay: 0,\n      maxDelay: 0,\n      factor: 0,\n      maxAttempts: 3,\n      timeout: 0,\n      totalTimeout: 0,\n      jitter: false,\n      handleError: null,\n      handleTimeout: null,\n      handleTotalTimeout: null,\n      beforeAttempt: null,\n      calculateDelay: null\n    });\n\n    attemptCount++;\n\n    t.true(almostEqual(actualDelay, expectedDelays[context.attemptNum], DELAY_TOLERANCE));\n\n    throw new Error(`attempt ${context.attemptNum}`);\n  }));\n\n  t.is(attemptCount, 3);\n  t.is(err.message, 'attempt 2');\n});\n\ntest('should support initialDelay', async (t) => {\n  let expectedDelays = [\n    100,\n    300,\n    300\n  ];\n\n  let lastTime = Date.now();\n  let attemptCount = 0;\n\n  const err = await t.throws(retry(async (context) => {\n    attemptCount++;\n\n    let newTime = Date.now();\n    let actualDelay = newTime - lastTime;\n    lastTime = newTime;\n\n    t.true(almostEqual(actualDelay, expectedDelays[context.attemptNum], DELAY_TOLERANCE));\n\n    throw new Error(`attempt ${context.attemptNum}`);\n  }, {\n    initialDelay: 100,\n    maxAttempts: 3,\n    delay: 300\n  }));\n\n  t.is(attemptCount, 3);\n  t.is(err.message, 'attempt 2');\n});\n\ntest('should stop trying once maxAttempts is reached', async (t) => {\n  const maxAttempts = 5;\n  let attemptCount = 0;\n\n  const err = await t.throws(retry(async (context) => {\n    t.is(context.attemptNum, attemptCount);\n    attemptCount++;\n    throw new Error('FAILED');\n  }, {\n    maxAttempts,\n    delay: 0\n  }));\n\n  t.is(err.message, 'FAILED');\n  t.is(attemptCount, maxAttempts);\n});\n\ntest('should support timeout on first attempt', async (t) => {\n  const err = await t.throws(retry(async () => {\n    await sleep(500);\n  }, {\n    delay: 0,\n    timeout: 50,\n    maxAttempts: 3\n  }));\n\n  t.is(err.code, 'ATTEMPT_TIMEOUT');\n});\n\ntest('should support timeout and handleTimeout', async (t) => {\n  async function fallback () {\n    await sleep(100);\n    return 'used fallback';\n  }\n\n  const result = await retry<string>(async () => {\n    await sleep(500);\n    return 'did not use fallback';\n  }, {\n    delay: 0,\n    timeout: 50,\n    maxAttempts: 2,\n    handleTimeout: fallback\n  });\n\n  t.is(result, 'used fallback');\n});\n\ntest('should allow handleTimeout to throw an error', async (t) => {\n  const err = await t.throws(retry(async () => {\n    await sleep(500);\n  }, {\n    delay: 0,\n    timeout: 50,\n    maxAttempts: 2,\n    handleTimeout: async (context) => {\n      throw new Error('timeout occurred');\n    }\n  }));\n\n  t.is(err.message, 'timeout occurred');\n});\n\ntest('should support timeout for multiple attempts', async (t) => {\n  let attemptCount = 0;\n  const err = await t.throws(retry(async (context) => {\n    attemptCount++;\n\n    if (context.attemptNum === 2) {\n      return sleep(500);\n    } else {\n      throw new Error('fake error');\n    }\n  }, {\n    delay: 0,\n    timeout: 50,\n    maxAttempts: 5\n  }));\n\n  // third attempt should timeout\n  t.is(attemptCount, 3);\n  t.is(err.code, 'ATTEMPT_TIMEOUT');\n});\n\ntest('should support totalTimeout on first attempt', async (t) => {\n  const err = await t.throws(retry(async () => {\n    await sleep(500);\n  }, {\n    delay: 0,\n    totalTimeout: 50,\n    maxAttempts: 3\n  }));\n\n  t.is(err.code, 'TOTAL_TIMEOUT');\n});\n\ntest('should support totalTimeout and handleTotalTimeout', async (t) => {\n  async function fallback () {\n    await sleep(100);\n    return 'used fallback';\n  }\n\n  const result = await retry<string>(async () => {\n    await sleep(500);\n    return 'did not use fallback';\n  }, {\n    delay: 0,\n    totalTimeout: 50,\n    maxAttempts: 2,\n    handleTotalTimeout: fallback\n  });\n\n  t.is(result, 'used fallback');\n});\n\ntest('should allow handleTotalTimeout to throw an error', async (t) => {\n  const err = await t.throws(retry(async () => {\n    await sleep(500);\n  }, {\n    delay: 0,\n    totalTimeout: 50,\n    maxAttempts: 2,\n    handleTotalTimeout: async (context) => {\n      throw new Error('timeout occurred');\n    }\n  }));\n\n  t.is(err.message, 'timeout occurred');\n});\n\ntest('should support totalTimeout that happens between attempts', async (t) => {\n  let attemptCount = 0;\n  const err = await t.throws(retry(async (context) => {\n    attemptCount++;\n\n    if (context.attemptNum > 2) {\n      return 'did not timeout';\n    } else {\n      await sleep(20);\n      throw new Error('fake error');\n    }\n  }, {\n    delay: 0,\n    totalTimeout: 50,\n    maxAttempts: 5\n  }));\n\n  // third attempt should timeout\n  t.is(attemptCount, 3);\n  t.is(err.code, 'TOTAL_TIMEOUT');\n});\n\ntest('should support retries', async (t) => {\n  const resultMessage = 'hello';\n  const result = await retry(async (context) => {\n    if (context.attemptsRemaining === 0) {\n      return resultMessage;\n    } else {\n      throw new Error('not done');\n    }\n  }, {\n    delay: 0,\n    maxAttempts: 5\n  });\n\n  t.is(result, resultMessage);\n});\n\ntest('should not exceed maximum retries', async (t) => {\n  const err = await t.throws(retry(async (context) => {\n    if (context.attemptNum !== 5) {\n      throw new Error('FAILED');\n    }\n  }, {\n    delay: 0,\n    maxAttempts: 4\n  }));\n  t.is(err.message, 'FAILED');\n});\n\ntest('should support factor property', async (t) => {\n  let expectedDelays = [\n    0,\n    100,\n    200,\n    400,\n    800\n  ];\n\n  let lastTime = Date.now();\n\n  return retry(async (context) => {\n    let newTime = Date.now();\n    let actualDelay = newTime - lastTime;\n    lastTime = newTime;\n\n    t.true(almostEqual(actualDelay, expectedDelays[context.attemptNum], DELAY_TOLERANCE));\n\n    if (context.attemptsRemaining > 0) {\n      throw new Error('FAILED');\n    }\n  }, {\n    maxAttempts: expectedDelays.length,\n    delay: 100,\n    factor: 2\n  });\n});\n\ntest('should support maximum delay', async (t) => {\n  let expectedDelays = [\n    0,\n    100,\n    200,\n    400,\n    800\n  ];\n\n  let lastTime = Date.now();\n\n  return retry(async (context) => {\n    let newTime = Date.now();\n    let actualDelay = newTime - lastTime;\n    lastTime = newTime;\n\n    t.true(almostEqual(actualDelay, Math.min(expectedDelays[context.attemptNum], 200), DELAY_TOLERANCE));\n\n    if (context.attemptNum !== 4) {\n      throw new Error('FAILED');\n    }\n  }, {\n    maxAttempts: 0,\n    delay: 100,\n    maxDelay: 200,\n    factor: 2\n  });\n});\n\ntest('should support jitter', async (t) => {\n  let expectedDelays = [\n    0,\n    100,\n    200,\n    400,\n    800\n  ];\n\n  let lastTime = Date.now();\n\n  return retry(async (context) => {\n    let newTime = Date.now();\n    let actualDelay = newTime - lastTime;\n    lastTime = newTime;\n\n    t.true(actualDelay <= (expectedDelays[context.attemptNum] + DELAY_TOLERANCE));\n\n    if (context.attemptsRemaining === 0) {\n      return 'success';\n    } else {\n      throw new Error('try again');\n    }\n  }, {\n    maxAttempts: expectedDelays.length,\n    delay: 100,\n    factor: 2,\n    jitter: true\n  });\n});\n\ntest('should support jitter with minDelay', async (t) => {\n  let expectedDelays = [\n    0,\n    100,\n    200,\n    400,\n    800\n  ];\n\n  let lastTime = Date.now();\n  const minDelay = 100;\n\n  return retry(async (context) => {\n    let newTime = Date.now();\n    let actualDelay = newTime - lastTime;\n    lastTime = newTime;\n\n    if (context.attemptNum > 0) {\n      t.true(actualDelay >= minDelay);\n    }\n\n    t.true(actualDelay <= (expectedDelays[context.attemptNum] + DELAY_TOLERANCE));\n\n    if (context.attemptsRemaining === 0) {\n      return 'success';\n    } else {\n      throw new Error('try again');\n    }\n  }, {\n    maxAttempts: expectedDelays.length,\n    delay: 100,\n    minDelay,\n    factor: 2,\n    jitter: true\n  });\n});\n\ntest('should detect invalid minDelay', async (t) => {\n  const err = await t.throws(retry(async (context) => {\n    throw new Error('should not get here');\n  }, {\n    delay: 100,\n    minDelay: 200\n  }));\n\n  t.true(err.message.startsWith('delay cannot be less than minDelay'));\n});\n\ntest('should detect invalid integer option', async (t) => {\n  for (const prop of [\n    'delay',\n    'initialDelay',\n    'minDelay',\n    'maxDelay',\n    'maxAttempts',\n    'timeout'\n  ]) {\n    try {\n      await retry(async (context) => {\n        throw new Error('should not get here');\n      }, {\n        [prop]: -1\n      });\n    } catch (err) {\n      t.is(err.message, `Value for ${prop} must be an integer greater than or equal to 0`);\n    }\n\n    try {\n      await retry(async (context) => {\n        throw new Error('should not get here');\n      }, {\n        [prop]: 'abc'\n      });\n    } catch (err) {\n      t.is(err.message, `Value for ${prop} must be an integer greater than or equal to 0`);\n    }\n  }\n});\n\ntest('should detect invalid factor option', async (t) => {\n  try {\n    await retry(async (context) => {\n      throw new Error('should not get here');\n    }, {\n      factor: -1\n    });\n  } catch (err) {\n    t.is(err.message, `Value for factor must be a number greater than or equal to 0`);\n  }\n\n  try {\n    const options = {};\n\n    (options as any).factor = 'abc';\n\n    await retry(async (context) => {\n      throw new Error('should not get here');\n    }, options);\n  } catch (err) {\n    t.is(err.message, `Value for factor must be a number greater than or equal to 0`);\n  }\n});\n\ntest('should allow attempts to be aborted via handleError', async (t) => {\n  const err = await t.throws(retry(async (context) => {\n    if (context.attemptNum === 1) {\n      const err: any = new Error('Fatal error');\n      err.retryable = false;\n      throw err;\n    } else {\n      throw new Error('try again');\n    }\n  }, {\n    delay: 0,\n    maxAttempts: 4,\n    handleError (err, context) {\n      if (err.retryable === false) {\n        context.abort();\n      }\n    }\n  }));\n  t.is(err.retryable, false);\n});\n\ntest('should allow handleError to return new error', async (t) => {\n  const err = await t.throws(retry(async (context) => {\n    if (context.attemptNum === 1) {\n      const err: any = new Error('Fatal error');\n      err.retryable = false;\n      throw err;\n    } else {\n      throw new Error('try again');\n    }\n  }, {\n    delay: 0,\n    maxAttempts: 4,\n    handleError (err, context) {\n      if (err.retryable === false) {\n        throw new Error('not retryable');\n      }\n    }\n  }));\n  t.is(err.message, 'not retryable');\n});\n\ntest('should allow attempts to be aborted via beforeAttempt', async (t) => {\n  const err = await t.throws(retry(async (context) => {\n    throw new Error('try again');\n  }, {\n    delay: 0,\n    maxAttempts: 4,\n    beforeAttempt (context) {\n      if (context.attemptsRemaining === 3) {\n        context.abort();\n      }\n    }\n  }));\n  t.is(err.code, 'ATTEMPT_ABORTED');\n});\n\ntest('should allow caller to provide calculateDelay function', async (t) => {\n  let expectedDelays = [\n    50,\n    150,\n    250,\n    350,\n    450\n  ];\n\n  let lastTime = Date.now();\n\n  return retry(async (context) => {\n    let newTime = Date.now();\n    let actualDelay = newTime - lastTime;\n    lastTime = newTime;\n\n    t.true(actualDelay <= (expectedDelays[context.attemptNum] + DELAY_TOLERANCE));\n\n    if (context.attemptsRemaining === 0) {\n      return 'success';\n    }\n  }, {\n    maxAttempts: expectedDelays.length,\n    delay: 0,\n    factor: 2,\n    calculateDelay (context) {\n      return context.attemptNum * 100 + 50;\n    }\n  });\n});\n\ntest('should allow for return type to be specified', async (t) => {\n  interface TestResult {\n    str: string;\n    num: number;\n  }\n\n  const attemptFunc = () => ({ str: 'string', num: 25 });\n\n  const result = await retry<TestResult>(async (context) => {\n    // typescript will check to make sure\n    // that the return value of attemptFunc\n    // matches the TestResult interface\n    return attemptFunc();\n  });\n\n  // since the TestResult type was given as the type argument,\n  // typescript will automatically infer the type of 'result'.\n  // accessing something like result.fieldThatDoesNotExist\n  // will cause typescript to complain\n  //\n  // You can uncomment the line below to test that\n  // t.is(result.fieldThatDoesNotExist, undefined);\n  t.is(result.str, 'string');\n  t.is(result.num, 25);\n});\n"]}